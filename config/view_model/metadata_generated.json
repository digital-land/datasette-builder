{
    "plugins": {
        "datasette-cors": {
            "host_wildcards": [
                "*"
            ]
        },
        "datasette-leaflet-geojson": {
            "default_maps_to_load": 3
        }
    },
    "databases": {
        "view_model": {
            "tables": {
                "geography": {
                    "size": 10
                },
                "slug": {
                    "label_column": "slug"
                }
            },
            "queries": {
                "point_geography": {
                    "sql": "SELECT geography, name, geometry FROM geography WHERE geometry IS NOT NULL AND WITHIN(GeomFromText('POINT(' || :longitude || ' ' || :latitude || ')'), geom)",
                    "title": "Geographies that encompass a point"
                },
                "bounded_geography_old": {
                    "sql": "SELECT * FROM geography WHERE geography.rowid in (SELECT pkid FROM idx_geography_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny))",
                    "title": "Geographies inside bounding box (old)"
                },
                "bounded_geography": {
                    "sql": "SELECT geojson_simple FROM geography_geom WHERE geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny))",
                    "title": "Geographies inside bounding box"
                },
                "bounded_geography_simplified": {
                    "sql": "SELECT geojson_simple FROM geography_geom WHERE geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny))",
                    "title": "Geographies inside bounding box (simplified)"
                },
                "bounded_geography_simplified_paged": {
                    "sql": "SELECT geojson_simple AS geojson FROM geography_geom WHERE geography_geom.rowid > :after AND geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny)) ORDER BY rowid limit 100",
                    "title": "Geographies inside bounding box (simplified) page size 100"
                },
                "bounded_geography_full_paged": {
                    "sql": "SELECT geojson_full AS geojson FROM geography_geom WHERE geography_geom.rowid > :after AND geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny)) ORDER BY rowid limit 100",
                    "title": "Geographies inside bounding box (full) page size 100"
                },
                "bounded_geography_simplified_paged_by_type": {
                    "sql": "SELECT geojson_simple AS geojson FROM geography_geom WHERE geography_geom.rowid > :after AND geography_geom.type = :type AND geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny)) ORDER BY rowid limit 100",
                    "title": "Geographies inside bounding box (simplified) page size 100 by type"
                },
                "bounded_geography_full_paged_by_type": {
                    "sql": "SELECT geojson_full AS geojson FROM geography_geom WHERE geography_geom.rowid > :after AND geography_geom.type = :type AND geography_geom.rowid in (SELECT pkid FROM idx_geography_geom_geom WHERE (xmin < :bbox_maxx AND xmax > :bbox_minx) AND (ymin < :bbox_maxy AND ymax > :bbox_miny)) ORDER BY rowid limit 100",
                    "title": "Geographies inside bounding box (full) page size 100 by type"
                },
                "bounded_geography_brownfield_land": {
                    "sql": "SELECT json_insert(gg.geojson_full, '$.properties.hectares', (select m.value from metric as m join geography_metric gm on m.rowid = gm.metric_id where gm.geography_id = gg.rowid and m.field='hectares')) AS geojson FROM geography_geom AS gg WHERE gg.rowid > :after AND gg.type = :type AND Within(gg.geom_point, BuildMbr(CAST(:bbox_minx AS DOUBLE), CAST(:bbox_miny AS DOUBLE), CAST(:bbox_maxx AS DOUBLE), CAST(:bbox_maxy AS DOUBLE), 4326)) ORDER BY rowid limit 100",
                    "title": "Points inside bounding box page size 100 BFL"
                },
                "get_category_id": {
                    "sql": "SELECT id, type FROM category WHERE category=:category",
                    "title": "Get category id by reference"
                },
                "get_category_references": {
                    "sql": "SELECT * FROM (SELECT document.id AS id, document.document as reference, document.name as name, slug.id AS gid, slug.slug AS href, 'document' as type FROM document INNER JOIN document_category ON (document_category.document_id = document.id AND document_category.category_id = :category) INNER JOIN slug on slug.id=document.slug_id UNION ALL SELECT policy.id AS id, policy.policy as reference, policy.name as name, slug.id AS gid, slug.slug AS href, 'policy' as type FROM policy INNER JOIN policy_category ON (policy_category.policy_id = policy.id AND policy_category.category_id = :category) INNER JOIN slug on slug.id=policy.slug_id UNION ALL SELECT geography.id AS id, geography.geography as reference, geography.name as name, slug.id AS gid, slug.slug AS href, 'geography' as type FROM geography INNER JOIN geography_category ON (geography_category.geography_id = geography.id AND geography_category.category_id = :category) INNER JOIN slug on slug.id=geography.slug_id) WHERE gid > :gid ORDER BY gid",
                    "title": "Get all references for category"
                },
                "get_organisation_id": {
                    "sql": "SELECT id FROM organisation WHERE organisation=:organisation",
                    "title": "Get organisation id by reference"
                },
                "get_geography_id": {
                    "sql": "SELECT id, type FROM geography WHERE geography=:geography",
                    "title": "Get geography id by reference"
                },
                "get_geography_references": {
                    "sql": "SELECT * FROM (SELECT policy.id AS id, policy.policy as reference, policy.name as name, slug.id AS gid, slug.slug AS href, 'policy' as type FROM policy INNER JOIN policy_geography ON (policy_geography.policy_id = policy.id AND policy_geography.geography_id = :geography) INNER JOIN slug on slug.id=policy.slug_id UNION ALL SELECT document.id AS id, document.document as reference, document.name as name, slug.id AS gid, slug.slug AS href, 'document' as type FROM document INNER JOIN document_geography ON (document_geography.document_id = document.id AND document_geography.geography_id = :geography) INNER JOIN slug on slug.id=document.slug_id UNION ALL SELECT category.id AS id, category.category as reference, category.name as name, slug.id AS gid, slug.slug AS href, 'category' as type FROM category INNER JOIN geography_category ON (geography_category.category_id = category.id AND geography_category.geography_id = :geography) INNER JOIN slug on slug.id=category.slug_id) WHERE gid > :gid ORDER BY gid",
                    "title": "Get all references for geography"
                },
                "get_policy_id": {
                    "sql": "SELECT id FROM policy WHERE policy=:policy",
                    "title": "Get policy id by reference"
                },
                "get_policy_references": {
                    "sql": "SELECT * FROM (SELECT document.id AS id, document.document as reference, document.name as name, slug.id AS gid, slug.slug AS href, 'document' as type FROM document INNER JOIN policy_document ON (policy_document.document_id = document.id AND policy_document.policy_id = :policy) INNER JOIN slug on slug.id=document.slug_id UNION ALL SELECT category.id AS id, category.category as reference, category.name as name, slug.id AS gid, slug.slug AS href, 'category' as type FROM category INNER JOIN policy_category ON (policy_category.category_id = category.id AND policy_category.policy_id = :policy) INNER JOIN slug on slug.id=category.slug_id UNION ALL SELECT geography.id AS id, geography.geography as reference, geography.name as name, slug.id AS gid, slug.slug AS href, 'geography' as type FROM geography INNER JOIN policy_geography ON (policy_geography.geography_id = geography.id AND policy_geography.policy_id = :policy) INNER JOIN slug on slug.id=geography.slug_id) WHERE gid > :gid ORDER BY gid",
                    "title": "Get all references for policy"
                },
                "get_document_id": {
                    "sql": "SELECT id FROM document WHERE document=:document",
                    "title": "Get document id by reference"
                },
                "get_document_references": {
                    "sql": "SELECT * FROM (SELECT category.id AS id, category.category as reference, category.name as name, slug.id AS gid, slug.slug AS href, 'category' as type FROM category INNER JOIN document_category ON (document_category.category_id = category.id AND document_category.document_id = :document) INNER JOIN slug on slug.id=category.slug_id UNION ALL SELECT policy.id AS id, policy.policy as reference, policy.name as name, slug.id AS gid, slug.slug AS href, 'policy' as type FROM policy INNER JOIN policy_document ON (policy_document.policy_id = policy.id AND policy_document.document_id = :document) INNER JOIN slug on slug.id=policy.slug_id UNION ALL SELECT geography.id AS id, geography.geography as reference, geography.name as name, slug.id AS gid, slug.slug AS href, 'geography' as type FROM geography INNER JOIN document_geography ON (document_geography.geography_id = geography.id AND document_geography.document_id = :document) INNER JOIN slug on slug.id=geography.slug_id) WHERE gid > :gid ORDER BY gid",
                    "title": "Get all references for document"
                }
            }
        },
        "development-plan-document": {
            "tables": {
                "entry": {
                    "label_column": "entity"
                },
                "fact": {
                    "label_column": "attribute"
                }
            }
        }
    }
}